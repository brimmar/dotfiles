- name: Ubuntu based base tasks
  when: ansible_distribution in ["Debian", "Ubuntu", "Pop!_OS"]
  block:
    - name: Install packages
      apt:
        name:
          - pkg-config
          - libfreetype6-dev
          - libfontconfig1-dev
          - libxcb-xfixes0-dev
          - libxkbcommon-dev
          - build-essential
          - libssl-dev
          - libgtk-3-dev
          - libayatana-appindicator3-dev
          - librsvg2-dev
          - git-all
          - vim
          - python3
          - python3-dev
          - python3-pip
          - cmake
          - make
          - xclip
          - btop
          - neofetch
          - exa
          - bat
          - fzf
          - pass
          - brave-browser
          - kdeconnect
          - ripgrep
          - fd-find

    - name: Install pip dependencies for dconf
      become_user: "{{ host_user }}"
      pip:
        name: psutil
        state: present

    - name: Disable some things first
      become_user: "{{ host_user }}"
      block:
        - name: Screensaver
          block:
            - name: Color Shading Type
              dconf:
                key: "/org/gnome/desktop/screensaver/color-shading-type"
                value: "'solid'"
                state: present

            - name: Lock Delay
              dconf:
                key: "/org/gnome/desktop/screensaver/lock-delay"
                value: "uint32 0"
                state: present

            - name: Lock
              dconf:
                key: "/org/gnome/desktop/screensaver/lock-enabled"
                value: "false"
                state: present

            - name: Picture Options
              dconf:
                key: "/org/gnome/desktop/screensaver/picture-options"
                value: "'zoom'"
                state: present

            - name: Picture URI
              dconf:
                key: "/org/gnome/desktop/screensaver/picture-uri"
                value: "'file:///usr/share/backgrounds/pop/nick-nazzaro-space-blue.png'"
                state: present

            - name: Primary Color
              dconf:
                key: "/org/gnome/desktop/screensaver/primary-color"
                value: "'#000000'"
                state: present

            - name: Secondary Color
              dconf:
                key: "/org/gnome/desktop/screensaver/secondary-color"
                value: "'#000000'"
                state: present

            - name: Lock On Suspend
              dconf:
                key: "/org/gnome/desktop/screensaver/ubuntu-lock-on-suspend"
                value: "false"
                state: present

        - name: Session
          block:
            - name: Idle Delay
              dconf:
                key: "/org/gnome/desktop/session/idle-delay"
                value: "uint32 0"
                state: present

    - name: Install Docker
      block:
        - name: Download Docker
          apt:
            name:
              - docker-ce
          register: download_docker_status

        - name: Add Docker User
          when: download_docker_status.changed
          command: "usermod -aG docker {{ host_user }}"

        - name: Update Docker Groups
          become_user: "{{ host_user }}"
          when: download_docker_status.changed
          command: newgrp docker

- name: Arch based base tasks
  when: ansible_distribution in ["Archlinux"]
  block:
    - name: Install packages
      pacman:
        name:
          - pkg-config
          - freetype2
          - fontconfig
          - libxcb
          - libxkbcommon
          - openssl
          - gtk3
          - libappindicator-gtk3
          - librsvg
          - git
          - vim
          - python
          - python-pip
          - cmake
          - make
          - xclip
          - btop
          - neofetch
          - exa
          - bat
          - fzf
          - pass
          - kdeconnect
          - docker
          - syncthing
          - flatpak
          - neovim
          - unzip
          - bash-completion
          - ripgrep
          - brightnessctl
          - playerctl
          - fd
        state: present

    - name: Install yay
      become_user: "{{ host_user }}"
      block:
        - name: Clone yay repository
          git:
            dest: "/home/{{ host_user }}/yay-bin/"
            recursive: no
            repo: "https://aur.archlinux.org/yay-bin.git"

        - name: Give permission
          file:
            path: "/home/{{ host_user }}/yay-bin"
            state: directory
            owner: "{{ host_user }}"
            mode: 0755

        - name: Run makepkg
          command:
            chdir: "/home/{{ host_user }}/yay-bin/"
            cmd: makepkg -si --noconfirm

    - name: Configure Docker User
      block:
        - name: Start Docker Service
          service:
            name: "docker"
            enabled: yes
            state: started

        - name: Add Docker User
          command: "usermod -aG docker {{ host_user }}"

        - name: Update Docker Groups
          become_user: "{{ host_user }}"
          command: newgrp docker

    - name: Install Brave
      become_user: "ansible"
      command: yay -S --noconfirm --needed brave-bin

    - name: Add Flathub Repo
      block:
        - name: Add System Wide Repo
          command: flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
        - name: Add User Wide Repo
          become_user: "{{ host_user }}"
          command: flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

    - name: Update Flatpak
      command: flatpak update

- name: Install Oh-my-bash!
  become_user: "{{ host_user }}"
  block:
    - name: Download Oh-my-bash!
      block:
        - name: Ensure Oh-my-bash! Directory Exists
          file:
            path: "/home/{{ host_user }}/ohmybash/"
            state: directory
            mode: 0755

        - name: Download Oh-my-bash!
          get_url:
            url: https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh
            dest: "/home/{{ host_user }}/ohmybash/install.sh"
            mode: 0755
          register: download_ohmybash_result

    - name: Ensure Oh-My-Bash Install
      become_user: "{{ host_user }}"
      when: download_ohmybash_result.changed
      file:
        path: "/home/{{ host_user }}/.oh-my-bash"
        state: absent

    - name: Run Script to Install Oh-my-bash!
      become_user: "{{ host_user }}"
      when: download_ohmybash_result.changed
      command: "/home/{{ host_user }}/ohmybash/install.sh"

- name: Install Neovim
  when: ansible_distribution in ["Debian", "Ubuntu", "Pop!_OS"]
  become_user: "{{ host_user }}"
  block:
    - name: Download Neovim
      block:
        - name: Ensure Neovim Directory Exists
          file:
            path: "/home/{{ host_user }}/neovim/"
            state: directory
            mode: 0755

        - name: Download Neovim
          get_url:
            url: https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
            dest: "/home/{{ host_user }}/neovim/nvim.appimage"
            mode: 0755
          register: download_nvim_result

    - name: Install Neovim
      when: download_nvim_result.changed
      block:
        - name: Change permissions of AppImage
          file:
            dest: "/home/{{ host_user }}/neovim/nvim.appimage"
            mode: 0755

        - name: Extract AppImage
          command:
            chdir: "/home/{{ host_user }}/neovim/"
            cmd: ./nvim.appimage --appimage-extract

        - name: Symlink Nvim Directory to Root
          file:
            src: "/home/{{ host_user }}/neovim/squashfs-root"
            dest: "/squashfs-root"
            state: link
            force: yes
            mode: 0755

        - name: Force Symbolic Link with Neovim Appimage
          file:
            src: /squashfs-root/AppRun
            dest: /usr/bin/nvim
            state: link
            force: yes
            mode: 0755

        - name: Update Alternatives for Neovim
          shell:
            cmd: update-alternatives --install /usr/bin/{{ item }} {{ item }} /usr/bin/nvim 60 && update-alternatives --auto {{ item }}
          with_items:
            - vi
            - vim
            - editor

- name: Install NVM
  become_user: "{{ host_user }}"
  block:
    - name: Download NVM
      block:
        - name: Ensure NVM Directory Exists
          file:
            path: "/home/{{ host_user }}/nvm/"
            state: directory
            mode: 0755

        - name: Download NVM
          get_url:
            url: https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh
            dest: "/home/{{ host_user }}/nvm/install.sh"
            mode: 0755
          register: download_nvm_result

    - name: Install NVM
      become_user: "{{ host_user }}"
      when: download_nvm_result.changed
      command: "/home/{{ host_user }}/nvm/install.sh"

- name: Test for shells
  command: "which {{ item }}"
  with_items:
    - bash
  register: mg_shell_path

- name: set found path
  set_fact:
    mg_found_path: "{{ mg_shell_path.results | selectattr('stdout', 'defined') | map(attribute = 'stdout') | list | first }}"

- name: set bash command
  set_fact:
    mg_user_shell: { "command": "{{ mg_found_path }} -ic", "alias": "bash" }

- name: Download Rustup
  become_user: "{{ host_user }}"
  block:
    - name: Ensure Rust Directory Exists
      file:
        path: "/home/{{ host_user }}/rustup/"
        state: directory
        mode: 0755
    - name: Download Rustup
      get_url:
        url: https://sh.rustup.rs
        dest: "/home/{{ host_user }}/rustup/install.sh"
        mode: 0755
      register: download_rustup_result

- name: Download Bun
  become_user: "{{ host_user }}"
  block:
    - name: Ensure Bun Directory Exists
      file:
        path: "/home/{{ host_user }}/bun/"
        state: directory
        mode: 0755
    - name: Download Bun
      get_url:
        url: https://bun.sh/install
        dest: "/home/{{ host_user }}/bun/install.sh"
        mode: 0755
      register: download_bun_result
